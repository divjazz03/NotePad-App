/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package main;

import com.formdev.flatlaf.intellijthemes.FlatArcDarkIJTheme;
import java.awt.Color;
import java.awt.Font;
import java.awt.Image;
import java.awt.print.PrinterException;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.net.URL;
import java.util.Arrays;

import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.ImageIcon;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.WindowConstants;
import javax.swing.event.UndoableEditEvent;
import javax.swing.event.UndoableEditListener;
import javax.swing.text.Document;
import javax.swing.undo.UndoManager;
import org.drjekyll.fontchooser.FontDialog;

/**
 *
 * @author Divine
 */
public class NotePad extends javax.swing.JFrame {

    private boolean isSaved = false;
    private File File;
    private String textBuffer = "";
    protected UndoManager undo;
    private FindDialog findDialog;
    private Font defaultFontSize;

    /**
     * Creates new form NotePad
     */
    public NotePad() {
        initComponents();
        undo = new UndoManager();
        defaultFontSize = new Font(textArea.getFont().getFontName(), textArea.getFont().getStyle(), 14);
        Document doc = textArea.getDocument();
        doc.addUndoableEditListener(new UndoableEditListener() {
            @Override
            public void undoableEditHappened(UndoableEditEvent e) {
                undo.addEdit(e.getEdit());
            }
        });
        URL imageUrl = NotePad.class.getResource("icon/notepad.png");
        if (imageUrl != null) {
            ImageIcon imageIcon = new ImageIcon(imageUrl);
            Image icon = imageIcon.getImage();
            this.setIconImage(icon);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        file = new javax.swing.JMenu();
        new_menu = new javax.swing.JMenuItem();
        open_menu = new javax.swing.JMenuItem();
        save_menu = new javax.swing.JMenuItem();
        saveAs_Menu = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        print_menu = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        exit_menu = new javax.swing.JMenuItem();
        edit = new javax.swing.JMenu();
        undo_menu = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        cut_menu = new javax.swing.JMenuItem();
        copy_menu = new javax.swing.JMenuItem();
        paste_menu = new javax.swing.JMenuItem();
        delete_menu = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        find_menu = new javax.swing.JMenuItem();
        find_next_menu = new javax.swing.JMenuItem();
        replace_menu = new javax.swing.JMenuItem();
        goto_menu = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        selectAll_menu = new javax.swing.JMenuItem();
        timeDate_menu = new javax.swing.JMenuItem();
        format = new javax.swing.JMenu();
        wordWrap_menu = new javax.swing.JCheckBoxMenuItem();
        font_menu = new javax.swing.JMenuItem();
        setTextColour_menu = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenu1 = new javax.swing.JMenu();
        zoomIn_subMenu = new javax.swing.JMenuItem();
        zoomOut_subMenu = new javax.swing.JMenuItem();
        restoreDefaultZoom_subMenu = new javax.swing.JMenuItem();
        statusBar_menu = new javax.swing.JCheckBoxMenuItem();
        jMenu5 = new javax.swing.JMenu();
        aboutNotepad_menu = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("untitled");
        setFont(new java.awt.Font("Consolas", 2, 14)); // NOI18N

        textArea.setColumns(20);
        textArea.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        textArea.setRows(5);
        textArea.setToolTipText("");
        textArea.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jScrollPane1.setViewportView(textArea);

        file.setText("File");

        new_menu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        new_menu.setText("New");
        new_menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                new_menuActionPerformed(evt);
            }
        });
        file.add(new_menu);

        open_menu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        open_menu.setText("Open");
        open_menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                open_menuActionPerformed(evt);
            }
        });
        file.add(open_menu);

        save_menu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        save_menu.setText("Save");
        save_menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                save_menuActionPerformed(evt);
            }
        });
        file.add(save_menu);

        saveAs_Menu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        saveAs_Menu.setText("Save As");
        saveAs_Menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAs_MenuActionPerformed(evt);
            }
        });
        file.add(saveAs_Menu);
        file.add(jSeparator1);

        print_menu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        print_menu.setText("Print");
        print_menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                print_menuActionPerformed(evt);
            }
        });
        file.add(print_menu);
        file.add(jSeparator3);

        exit_menu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_DOWN_MASK));
        exit_menu.setText("Exit");
        exit_menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exit_menuActionPerformed(evt);
            }
        });
        file.add(exit_menu);

        jMenuBar1.add(file);

        edit.setText("Edit");

        undo_menu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        undo_menu.setText("Undo");
        undo_menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undo_menuActionPerformed(evt);
            }
        });
        edit.add(undo_menu);
        edit.add(jSeparator2);

        cut_menu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        cut_menu.setText("Cut");
        cut_menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cut_menuActionPerformed(evt);
            }
        });
        edit.add(cut_menu);

        copy_menu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        copy_menu.setText("Copy");
        copy_menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copy_menuActionPerformed(evt);
            }
        });
        edit.add(copy_menu);

        paste_menu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        paste_menu.setText("Paste");
        paste_menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paste_menuActionPerformed(evt);
            }
        });
        edit.add(paste_menu);

        delete_menu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, 0));
        delete_menu.setText("Delete");
        delete_menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delete_menuActionPerformed(evt);
            }
        });
        edit.add(delete_menu);
        edit.add(jSeparator4);

        find_menu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        find_menu.setText("Find");
        find_menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                find_menuActionPerformed(evt);
            }
        });
        edit.add(find_menu);

        find_next_menu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F3, 0));
        find_next_menu.setText("Find Next");
        find_next_menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                find_next_menuActionPerformed(evt);
            }
        });
        edit.add(find_next_menu);

        replace_menu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        replace_menu.setText("Replace");
        replace_menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                replace_menuActionPerformed(evt);
            }
        });
        edit.add(replace_menu);

        goto_menu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        goto_menu.setText("Go To");
        edit.add(goto_menu);
        edit.add(jSeparator5);

        selectAll_menu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        selectAll_menu.setText("Select All");
        selectAll_menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAll_menuActionPerformed(evt);
            }
        });
        edit.add(selectAll_menu);

        timeDate_menu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        timeDate_menu.setText("Time/Date");
        timeDate_menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeDate_menuActionPerformed(evt);
            }
        });
        edit.add(timeDate_menu);

        jMenuBar1.add(edit);

        format.setText("Format");

        wordWrap_menu.setSelected(true);
        wordWrap_menu.setText("Word Wrap");
        wordWrap_menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wordWrap_menuActionPerformed(evt);
            }
        });
        format.add(wordWrap_menu);

        font_menu.setText("Font");
        font_menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                font_menuActionPerformed(evt);
            }
        });
        format.add(font_menu);

        setTextColour_menu.setText("Text Colour");
        setTextColour_menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setTextColour_menuActionPerformed(evt);
            }
        });
        format.add(setTextColour_menu);

        jMenuBar1.add(format);

        jMenu4.setText("View");

        jMenu1.setText("Zoom");

        zoomIn_subMenu.setText("Zoom In");
        zoomIn_subMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomIn_subMenuActionPerformed(evt);
            }
        });
        jMenu1.add(zoomIn_subMenu);

        zoomOut_subMenu.setText("Zoom Out");
        zoomOut_subMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomOut_subMenuActionPerformed(evt);
            }
        });
        jMenu1.add(zoomOut_subMenu);

        restoreDefaultZoom_subMenu.setText("Restore Default Zoom");
        restoreDefaultZoom_subMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restoreDefaultZoom_subMenuActionPerformed(evt);
            }
        });
        jMenu1.add(restoreDefaultZoom_subMenu);

        jMenu4.add(jMenu1);

        statusBar_menu.setSelected(true);
        statusBar_menu.setText("Status Bar");
        jMenu4.add(statusBar_menu);

        jMenuBar1.add(jMenu4);

        jMenu5.setText("Help");

        aboutNotepad_menu.setText("NotePad");
        jMenu5.add(aboutNotepad_menu);

        jMenuBar1.add(jMenu5);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1493, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 616, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void new_menuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_new_menuActionPerformed
        // TODO add your handling code here:
        if (!textArea.getText().isEmpty()) {
            if (isSaved != true) {
                int result = JOptionPane.showConfirmDialog(this, "Do you want to save " + this.getTitle() + "?", "Notepad", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (result == 0) {
                    saveAs_MenuActionPerformed(evt);
                    setTitle("untitled");
                    textArea.setText("");
                    isSaved = false;
                    File = null;
                } else if (result == 1) {
                    setTitle("untitled");
                    textArea.setText("");
                    isSaved = false;
                    File = null;

                }

            } else {
                setTitle("untitled");
                textArea.setText("");
                isSaved = false;
                File = null;
            }

        }
    }//GEN-LAST:event_new_menuActionPerformed

    private void open_menuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_open_menuActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        chooser.setFileFilter(new TextFilter());
        int returnVal = chooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File = chooser.getSelectedFile();
            try (FileReader reader = new FileReader(File); BufferedReader bReader = new BufferedReader(reader)) {
                textArea.read(bReader, null);
                setTitle(File.getName().substring(0, File.getName().length() - 4));
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_open_menuActionPerformed

    private void save_menuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_save_menuActionPerformed

        boolean isEmpty = textArea.getText().isEmpty();
        if (File != null) {

            try (FileWriter fileWriter = new FileWriter(File); BufferedWriter bWriter = new BufferedWriter(fileWriter)) {
                textArea.write(bWriter);
            } catch (IOException e) {
                e.printStackTrace();
            }

        } else {
            saveAs_MenuActionPerformed(evt);
        }

        isSaved = true;

    }//GEN-LAST:event_save_menuActionPerformed

    private void copy_menuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copy_menuActionPerformed
        textArea.copy();
    }//GEN-LAST:event_copy_menuActionPerformed

    private void delete_menuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delete_menuActionPerformed
        textArea.replaceSelection("");
    }//GEN-LAST:event_delete_menuActionPerformed

    private void find_menuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_find_menuActionPerformed
        findDialog = new FindDialog(this, true, textArea);
        findDialog.setVisible(true);
    }//GEN-LAST:event_find_menuActionPerformed

    private void find_next_menuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_find_next_menuActionPerformed
        if (findDialog == null) {
            findDialog = new FindDialog(this, true, textArea);
            findDialog.setVisible(true);
        }


    }//GEN-LAST:event_find_next_menuActionPerformed

    private void timeDate_menuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeDate_menuActionPerformed
        Date current = new Date();
        String date = null;
        date = SimpleDateFormat.getInstance().format(current);
        textArea.append(date);
    }//GEN-LAST:event_timeDate_menuActionPerformed

    private void print_menuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_print_menuActionPerformed
        if (!textArea.getText().isEmpty()) {
            try {
                boolean complete = textArea.print();
                if (complete) {
                    JOptionPane.showConfirmDialog(this, "Printing has been completed", "Notepad", JOptionPane.INFORMATION_MESSAGE);

                } else {
                    JOptionPane.showConfirmDialog(this, "Printing Was Cancelled", "Notepad", JOptionPane.WARNING_MESSAGE);
                }
            } catch (PrinterException ex) {
                System.out.println(Arrays.toString(ex.getStackTrace()));
                JOptionPane.showConfirmDialog(this, "An Error Occurred", "NotePad", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_print_menuActionPerformed

    private void font_menuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_font_menuActionPerformed
        FontDialog dialog = new FontDialog(this, "fontDialog", true);
        dialog.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        dialog.setVisible(true);
        textArea.setFont(dialog.getSelectedFont());

    }//GEN-LAST:event_font_menuActionPerformed

    private void zoomIn_subMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomIn_subMenuActionPerformed
        textArea.setFont(new Font(textArea.getFont().getFontName(), textArea.getFont().getSize(), textArea.getFont().getSize() + 1));
    }//GEN-LAST:event_zoomIn_subMenuActionPerformed

    private void saveAs_MenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAs_MenuActionPerformed
        JFileChooser saveFile = new JFileChooser();
        saveFile.setFileFilter(new TextFilter());
        saveFile.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);

        int returnVal = saveFile.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File = saveFile.getSelectedFile();
            if (!saveFile.getSelectedFile().getAbsolutePath().endsWith("txt")) {
                File = new File(saveFile.getSelectedFile() + ".txt");

            }

            try (FileWriter fileWriter = new FileWriter(File); BufferedWriter bWriter = new BufferedWriter(fileWriter)) {
                boolean isFile = false;
                if (!File.exists()) {
                    isFile = File.createNewFile();
                }
                this.textArea.write(bWriter);
                this.setTitle(File.getName().substring(0, File.getName().length() - 4));
            } catch (Exception ex) {
                ex.printStackTrace();
                JOptionPane error = new JOptionPane("Couldn't create File", JOptionPane.ERROR_MESSAGE);
            }

        }
        isSaved = true;
    }//GEN-LAST:event_saveAs_MenuActionPerformed

    private void exit_menuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exit_menuActionPerformed
        if (textArea.getText().isEmpty()) {
            System.exit(0);

        }
        if (isSaved == false) {
            int result = JOptionPane.showConfirmDialog(this, "Do you want to exit without saving?", "NotePad", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (result == 1) {
                save_menuActionPerformed(evt);
            } else if (result == 0) {
                System.exit(0);
            }

        }
    }//GEN-LAST:event_exit_menuActionPerformed

    private void undo_menuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undo_menuActionPerformed
        undo.undo();


    }//GEN-LAST:event_undo_menuActionPerformed

    private void cut_menuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cut_menuActionPerformed

        textArea.cut();
    }//GEN-LAST:event_cut_menuActionPerformed

    private void paste_menuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paste_menuActionPerformed
        textArea.paste();
    }//GEN-LAST:event_paste_menuActionPerformed

    private void replace_menuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_replace_menuActionPerformed
        ReplaceDialog dialog = new ReplaceDialog(this, true, textArea);
        dialog.setVisible(true);
    }//GEN-LAST:event_replace_menuActionPerformed

    private void selectAll_menuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAll_menuActionPerformed
        textArea.selectAll();
    }//GEN-LAST:event_selectAll_menuActionPerformed

    private void wordWrap_menuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wordWrap_menuActionPerformed
        if (wordWrap_menu.isSelected()) {
            textArea.setWrapStyleWord(true);
            textArea.setLineWrap(true);

        }
    }//GEN-LAST:event_wordWrap_menuActionPerformed

    private void setTextColour_menuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setTextColour_menuActionPerformed
        Color colour = JColorChooser.showDialog(this, "choose text colour", Color.WHITE);
        textArea.setForeground(colour);
    }//GEN-LAST:event_setTextColour_menuActionPerformed

    private void zoomOut_subMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomOut_subMenuActionPerformed
        textArea.setFont(new Font(textArea.getFont().getFontName(), textArea.getFont().getSize(), textArea.getFont().getSize() - 1));
    }//GEN-LAST:event_zoomOut_subMenuActionPerformed

    private void restoreDefaultZoom_subMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restoreDefaultZoom_subMenuActionPerformed
        textArea.setFont(defaultFontSize);
    }//GEN-LAST:event_restoreDefaultZoom_subMenuActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            /* for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }*/
            FlatArcDarkIJTheme.setup();

        } catch (Exception ex) {
            java.util.logging.Logger.getLogger(NotePad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new NotePad().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutNotepad_menu;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JMenuItem copy_menu;
    private javax.swing.JMenuItem cut_menu;
    private javax.swing.JMenuItem delete_menu;
    private javax.swing.JMenu edit;
    private javax.swing.JMenuItem exit_menu;
    private javax.swing.JMenu file;
    private javax.swing.JMenuItem find_menu;
    private javax.swing.JMenuItem find_next_menu;
    private javax.swing.JMenuItem font_menu;
    private javax.swing.JMenu format;
    private javax.swing.JMenuItem goto_menu;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JMenuItem new_menu;
    private javax.swing.JMenuItem open_menu;
    private javax.swing.JMenuItem paste_menu;
    private javax.swing.JMenuItem print_menu;
    private javax.swing.JMenuItem replace_menu;
    private javax.swing.JMenuItem restoreDefaultZoom_subMenu;
    private javax.swing.JMenuItem saveAs_Menu;
    private javax.swing.JMenuItem save_menu;
    private javax.swing.JMenuItem selectAll_menu;
    private javax.swing.JMenuItem setTextColour_menu;
    private javax.swing.JCheckBoxMenuItem statusBar_menu;
    private javax.swing.JTextArea textArea;
    private javax.swing.JMenuItem timeDate_menu;
    private javax.swing.JMenuItem undo_menu;
    private javax.swing.JCheckBoxMenuItem wordWrap_menu;
    private javax.swing.JMenuItem zoomIn_subMenu;
    private javax.swing.JMenuItem zoomOut_subMenu;
    // End of variables declaration//GEN-END:variables

}
